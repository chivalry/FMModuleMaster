// date.BusinessHolidays ( _year )
// Purpose:		Returns a list of the dates of observed holidays in the passed year.
// Version:		1.0 Jeremy Bante 11-10-1
// Notes:			This version of this function includes observed U.S. federal holidays. It should be
//				modified to include any holidays observed by the users of each particular system.
// Todo:			The logic for all of these holidays falls into two categories, holidays that are on a
//				specific day (7/4, 12/25) and holidays that fall on the Xth weekday of the month
//				(Martin Luther King Jr on the 3rd Monday in January) and so the algorithm for all
//				of the holidays are very similar. These algorithms should be broken into two
//				separate custom functions.
// Example:		date.BusinessHolidays ( 2015 ) = "1/1/2015¶1/19/2015¶2/16/2015¶5/25/2015¶"  &
//				  "7/3/2015¶9/7/2015¶10/12/2015¶11/11/2015¶11/26/2015¶12/25/2015"

Let (
  [
    _new_years_day = Let (
      [
        _date	= Date ( 1; 1; _year );
        _day		= DayOfWeek ( _date )
      ];
      
      Case (
        _day = 1;
        _date + 1; // following Monday

        _day = 7;
        ""; // previous Friday (in previous year)
      
      // Else
        _date
      )
    );
    
    //======================================================
    // Martin Luther King, Jr. Day (3rd Monday in January)
    _mlkj_day = Date ( 1; 15; _year ) 
      + Choose ( DayOfWeek ( Date ( 1; 1; _year ) ) - 1;
        1; 0; 6; 5; 4; 3; 2
      );
      
    //======================================================
    // Washington's Birthday (3rd Monday in February)
    _washington_bday = Date ( 2; 15; _year )  // earliest possible
      + Choose ( DayOfWeek ( Date ( 2; 1; _year ) ) - 1;
        1; 0; 6; 5; 4; 3; 2  // adjust for day of week of month start
      );
    
    //======================================================
    // Memorial Day (last Monday in May)
    _memorial_day = Date ( 5; 25; _year )  // earliest possible
      + Choose (
        DayOfWeek ( Date ( 5; 31; _year ) ) - 1;
        0; 6; 5; 4; 3; 2; 1  // adjust for day of week of month end
      );
      
    //======================================================
    // Independence Day (4 Jul)
    _independence_day = Let (
      [
        _date = Date ( 7; 4; _year );
        _day  = DayOfWeek ( _date )
      ];
    
      Case (
        _day = 1;
        _date + 1;  // following Monday
        
        _day = 7;
        _date - 1;  // previous Friday
      // Else
        _date
      )
    );
    
    //======================================================
    // Labor Day (1st Monday in September)
    _labor_day = Date ( 9; 1; _year )  // earliest possible
      + Choose (
        DayOfWeek ( Date ( 9; 1; _year ) ) - 1;
        1; 0; 6; 5; 4; 3; 2  // adjust for day of week of month start
      );
    
    //======================================================
    // Columbus Day (2nd Monday in October)
    _columbus_day = Date ( 10; 8; _year )  // earliest possible
      + Choose (
        DayOfWeek ( Date ( 10; 1; _year ) ) - 1;
        1; 0; 6; 5; 4; 3; 2  // adjust for day of week of month start
      );
    
    //======================================================
    // Veterans Day (11 Mov)
    _veterans_day = Let (
      [
        _date = Date ( 11; 11; _year );
        _day  = DayOfWeek ( _date )
      ];
    
      Case (
        _day = 1;
        _date + 1;  // following Monday
        
        _day = 7;
        _date - 1;  // previous Friday
      // Else
        _date
      )
    );
    
    //======================================================
    // Thanksgiving Day (4th thursday in November)
    _thanksgiving = Date ( 11; 22; _year )  // earliest possible date
      + Choose (
        DayOfWeek ( Date ( 11; 1; _year ) ) - 1;
        4; 3; 2; 1; 0; 6; 5  // adjust for day of week of month start
      );
      
    //======================================================
    // Christmas Day (25 Dec)
    _christmas = Let (
      [
        _date = Date ( 12; 25; _year );
        _day  = DayOfWeek ( _date )
      ];
    
      Case (
        _day = 1;
        _date + 1;  // following Monday
        
        _day = 7;
        _date - 1;  // previous Friday
      // Else
        _date
      )
    );
    
    //======================================================
    // New Years Day (observed from next year)
    _next_new_years_day = Let (
      [
        _date = Date ( 1; 1; _year + 1 )
      ];
    
      Case (
        DayOfWeek ( _date ) = 7;
        _date - 1
      // Else, Null
      )
    )
  ];

  List (
    _new_years_day;
    _mlkj_day;
    _washington_bday;
    _memorial_day;
    _independence_day;
    _labor_day;
    _columbus_day;
    _veterans_day;
    _thanksgiving;
    _christmas;
    _next_new_years_day
  )
)
