// dev.Repeat ( _count ; _statements ; _result_name )
// Purpose:		Executes _statements _count times and returns the variable named in _result_name.
// Parameters:		_count:	Repetition count, 0 < _count < 1,000,000
//				_statements:	One or more statements to be repeated
//				_result_name:	The variable name to return as the final result
// Version:		1.0 - Norimichi Tachibana - 14-07-07
//				1.1 - Norimichi Tachibana  -14-07-17 - modified the matters pointed out by "unix, Japan"
// Notes:			Creates a string with _count evaluates of _statements and then evaluates that (perhaps very long) string.
//				Note that while this loop overcomes the recursive limitations of custom functions, it's still rather slow
//				for counts exceeding 10,000.
// Todo:			To dos
// Example:		Let ( [ $c=0; $ret=0 ]; dev.Repeat ( 10 ; "$c=$c+1; $ret=$ret+$c" ; "$ret" )  ) = 55

Case (
  ( _count > 1000000 ) or ( _count < 0 ) ; 
  "?" ;

  Let (
    [
      _base = Substitute (
        SetPrecision ( 1 / 3 ; 333 ) ;
        [ "3"	; "999"	] ;
        [ "."	; "9"		]
      ) ;

      $_devp_repeat_statement	= "Let ( [ " & Trim ( _statements ) & " ] ; 0 ) " ;
      _statement_eval			= "Evaluate ( $_devp_repeat_statement ) + " ;

      $_devp_repeat_work_1 = Substitute ( _base ; 9 ; _statement_eval ) & "0" ;
      _work_1_eval = "Evaluate ( $_devp_repeat_work_1 ) + " ;

      _mod_count = Mod ( _count ; 1000 ) ;
      _mod_base = Left ( _base ; _mod_count ) ;
      $_devp_repeat_work_2 = Substitute ( _mod_base ; 9 ; _statement_eval ) & "0" ;
      _work_2_eval = "Evaluate ( $_devp_repeat_work_2 )" ;

      _div_count = Div ( _count ; 1000 ) ;
      _div_base = Left ( _base ; _div_count ) ;
      _ = Evaluate ( Substitute ( _div_base ; 9 ; _work_1_eval )  & _work_2_eval )
    ] ;

    Evaluate ( _result_name )
  )
)
